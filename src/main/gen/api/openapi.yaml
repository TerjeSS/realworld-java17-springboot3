openapi: 3.0.1
info:
  contact:
    name: RealWorld
    url: https://realworld.how
  description: Conduit API documentation
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Conduit API
  version: 1.0.0
servers:
- url: /api
tags:
- name: Articles
- name: Comments
- name: Favorites
- name: Profile
- name: Tags
- name: User and Authentication
paths:
  /users/login:
    post:
      description: Login for existing user
      operationId: Login
      requestBody:
        $ref: '#/components/requestBodies/LoginUserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login_200_response'
          description: User
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Existing user login
      tags:
      - User and Authentication
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /users:
    post:
      description: Register a new user
      operationId: CreateUser
      requestBody:
        $ref: '#/components/requestBodies/NewUserRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login_200_response'
          description: User
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      tags:
      - User and Authentication
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /user:
    get:
      description: Gets the currently logged-in user
      operationId: GetCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login_200_response'
          description: User
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Get current user
      tags:
      - User and Authentication
      x-accepts: application/json
    put:
      description: Updated user information for current user
      operationId: UpdateCurrentUser
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login_200_response'
          description: User
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Update current user
      tags:
      - User and Authentication
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /profiles/{username}:
    get:
      description: Get a profile of a user of the system. Auth is optional
      operationId: GetProfileByUsername
      parameters:
      - description: Username of the profile to get
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileByUsername_200_response'
          description: Profile
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Get a profile
      tags:
      - Profile
      x-accepts: application/json
  /profiles/{username}/follow:
    delete:
      description: Unfollow a user by username
      operationId: UnfollowUserByUsername
      parameters:
      - description: Username of the profile you want to unfollow
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileByUsername_200_response'
          description: Profile
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Unfollow a user
      tags:
      - Profile
      x-accepts: application/json
    post:
      description: Follow a user by username
      operationId: FollowUserByUsername
      parameters:
      - description: Username of the profile you want to follow
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileByUsername_200_response'
          description: Profile
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Follow a user
      tags:
      - Profile
      x-accepts: application/json
  /articles/feed:
    get:
      description: Get most recent articles from users you follow. Use query parameters
        to limit. Auth is required
      operationId: GetArticlesFeed
      parameters:
      - description: The number of items to skip before starting to collect the result
          set.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The numbers of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArticlesFeed_200_response'
          description: Multiple articles
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Get recent articles from users you follow
      tags:
      - Articles
      x-accepts: application/json
  /articles:
    get:
      description: Get most recent articles globally. Use query parameters to filter
        results. Auth is optional
      operationId: GetArticles
      parameters:
      - description: Filter by tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by author (username)
        explode: true
        in: query
        name: author
        required: false
        schema:
          type: string
        style: form
      - description: Filter by favorites of a user (username)
        explode: true
        in: query
        name: favorited
        required: false
        schema:
          type: string
        style: form
      - description: The number of items to skip before starting to collect the result
          set.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The numbers of items to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArticlesFeed_200_response'
          description: Multiple articles
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Get recent articles globally
      tags:
      - Articles
      x-accepts: application/json
    post:
      description: Create an article. Auth is required
      operationId: CreateArticle
      requestBody:
        $ref: '#/components/requestBodies/NewArticleRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticle_201_response'
          description: Single article
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Create an article
      tags:
      - Articles
      x-codegen-request-body-name: article
      x-content-type: application/json
      x-accepts: application/json
  /articles/{slug}:
    delete:
      description: Delete an article. Auth is required
      operationId: DeleteArticle
      parameters:
      - description: Slug of the article to delete
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: No content
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Delete an article
      tags:
      - Articles
      x-accepts: application/json
    get:
      description: Get an article. Auth not required
      operationId: GetArticle
      parameters:
      - description: Slug of the article to get
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticle_201_response'
          description: Single article
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Get an article
      tags:
      - Articles
      x-accepts: application/json
    put:
      description: Update an article. Auth is required
      operationId: UpdateArticle
      parameters:
      - description: Slug of the article to update
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateArticleRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticle_201_response'
          description: Single article
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Update an article
      tags:
      - Articles
      x-codegen-request-body-name: article
      x-content-type: application/json
      x-accepts: application/json
  /articles/{slug}/comments:
    get:
      description: Get the comments for an article. Auth is optional
      operationId: GetArticleComments
      parameters:
      - description: Slug of the article that you want to get comments for
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArticleComments_200_response'
          description: Multiple comments
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Get comments for an article
      tags:
      - Comments
      x-accepts: application/json
    post:
      description: Create a comment for an article. Auth is required
      operationId: CreateArticleComment
      parameters:
      - description: Slug of the article that you want to create a comment for
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/NewCommentRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticleComment_200_response'
          description: Single comment
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Create a comment for an article
      tags:
      - Comments
      x-codegen-request-body-name: comment
      x-content-type: application/json
      x-accepts: application/json
  /articles/{slug}/comments/{id}:
    delete:
      description: Delete a comment for an article. Auth is required
      operationId: DeleteArticleComment
      parameters:
      - description: Slug of the article that you want to delete a comment for
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the comment you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content: {}
          description: No content
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Delete a comment for an article
      tags:
      - Comments
      x-accepts: application/json
  /articles/{slug}/favorite:
    delete:
      description: Unfavorite an article. Auth is required
      operationId: DeleteArticleFavorite
      parameters:
      - description: Slug of the article that you want to unfavorite
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticle_201_response'
          description: Single article
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Unfavorite an article
      tags:
      - Favorites
      x-accepts: application/json
    post:
      description: Favorite an article. Auth is required
      operationId: CreateArticleFavorite
      parameters:
      - description: Slug of the article that you want to favorite
        explode: false
        in: path
        name: slug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticle_201_response'
          description: Single article
        "401":
          content: {}
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      security:
      - Token: []
      summary: Favorite an article
      tags:
      - Favorites
      x-accepts: application/json
  /tags:
    get:
      description: Get tags. Auth not required
      operationId: GetTags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTags_200_response'
          description: Tags
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
          description: Unexpected error
      summary: Get tags
      tags:
      - Tags
      x-accepts: application/json
components:
  parameters:
    offsetParam:
      description: The number of items to skip before starting to collect the result
        set.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    limitParam:
      description: The numbers of items to return.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 20
        minimum: 1
        type: integer
      style: form
  requestBodies:
    LoginUserRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login_request'
      description: Credentials to use
      required: true
    NewUserRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser_request'
      description: Details of the new user to register
      required: true
    UpdateUserRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCurrentUser_request'
      description: User details to update. At least **one** field is required.
      required: true
    NewArticleRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateArticle_request'
      description: Article to create
      required: true
    UpdateArticleRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateArticle_request'
      description: Article to update
      required: true
    NewCommentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateArticleComment_request'
      description: Comment you want to create
      required: true
  responses:
    TagsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTags_200_response'
      description: Tags
    SingleCommentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateArticleComment_200_response'
      description: Single comment
    MultipleCommentsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetArticleComments_200_response'
      description: Multiple comments
    SingleArticleResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateArticle_201_response'
      description: Single article
    MultipleArticlesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetArticlesFeed_200_response'
      description: Multiple articles
    ProfileResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetProfileByUsername_200_response'
      description: Profile
    UserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login_200_response'
      description: User
    EmptyOkResponse:
      content: {}
      description: No content
    Unauthorized:
      content: {}
      description: Unauthorized
    GenericError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
      description: Unexpected error
  schemas:
    LoginUser:
      properties:
        email:
          type: string
        password:
          format: password
          type: string
      required:
      - email
      - password
      type: object
    NewUser:
      properties:
        username:
          type: string
        email:
          type: string
        password:
          format: password
          type: string
      required:
      - email
      - password
      - username
      type: object
    User:
      example:
        image: image
        bio: bio
        email: email
        token: token
        username: username
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
      required:
      - bio
      - email
      - image
      - token
      - username
      type: object
    UpdateUser:
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
      type: object
    Profile:
      example:
        image: image
        following: true
        bio: bio
        username: username
      properties:
        username:
          type: string
        bio:
          type: string
        image:
          type: string
        following:
          type: boolean
      required:
      - bio
      - following
      - image
      - username
      type: object
    Article:
      example:
        tagList:
        - tagList
        - tagList
        createdAt: 2000-01-23T04:56:07.000+00:00
        author:
          image: image
          following: true
          bio: bio
          username: username
        description: description
        title: title
        body: body
        favoritesCount: 0
        slug: slug
        updatedAt: 2000-01-23T04:56:07.000+00:00
        favorited: true
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        favorited:
          type: boolean
        favoritesCount:
          type: integer
        author:
          $ref: '#/components/schemas/Profile'
      required:
      - author
      - body
      - createdAt
      - description
      - favorited
      - favoritesCount
      - slug
      - tagList
      - title
      - updatedAt
      type: object
    NewArticle:
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          items:
            type: string
          type: array
      required:
      - body
      - description
      - title
      type: object
    UpdateArticle:
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
      type: object
    Comment:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        author:
          image: image
          following: true
          bio: bio
          username: username
        id: 0
        body: body
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: integer
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        body:
          type: string
        author:
          $ref: '#/components/schemas/Profile'
      required:
      - author
      - body
      - createdAt
      - id
      - updatedAt
      type: object
    NewComment:
      properties:
        body:
          type: string
      required:
      - body
      type: object
    GenericErrorModel:
      properties:
        errors:
          $ref: '#/components/schemas/GenericErrorModel_errors'
      required:
      - errors
      type: object
    Login_request:
      properties:
        user:
          $ref: '#/components/schemas/LoginUser'
      required:
      - user
      type: object
    Login_200_response:
      example:
        user:
          image: image
          bio: bio
          email: email
          token: token
          username: username
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
      - user
      type: object
    CreateUser_request:
      properties:
        user:
          $ref: '#/components/schemas/NewUser'
      required:
      - user
      type: object
    UpdateCurrentUser_request:
      properties:
        user:
          $ref: '#/components/schemas/UpdateUser'
      required:
      - user
      type: object
    GetProfileByUsername_200_response:
      example:
        profile:
          image: image
          following: true
          bio: bio
          username: username
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
      required:
      - profile
      type: object
    GetArticlesFeed_200_response:
      example:
        articlesCount: 6
        articles:
        - tagList:
          - tagList
          - tagList
          createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          description: description
          title: title
          body: body
          favoritesCount: 0
          slug: slug
          updatedAt: 2000-01-23T04:56:07.000+00:00
          favorited: true
        - tagList:
          - tagList
          - tagList
          createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          description: description
          title: title
          body: body
          favoritesCount: 0
          slug: slug
          updatedAt: 2000-01-23T04:56:07.000+00:00
          favorited: true
      properties:
        articles:
          items:
            $ref: '#/components/schemas/Article'
          type: array
        articlesCount:
          type: integer
      required:
      - articles
      - articlesCount
      type: object
    CreateArticle_request:
      properties:
        article:
          $ref: '#/components/schemas/NewArticle'
      required:
      - article
      type: object
    CreateArticle_201_response:
      example:
        article:
          tagList:
          - tagList
          - tagList
          createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          description: description
          title: title
          body: body
          favoritesCount: 0
          slug: slug
          updatedAt: 2000-01-23T04:56:07.000+00:00
          favorited: true
      properties:
        article:
          $ref: '#/components/schemas/Article'
      required:
      - article
      type: object
    UpdateArticle_request:
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
      required:
      - article
      type: object
    GetArticleComments_200_response:
      example:
        comments:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          id: 0
          body: body
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          id: 0
          body: body
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
      required:
      - comments
      type: object
    CreateArticleComment_request:
      properties:
        comment:
          $ref: '#/components/schemas/NewComment'
      required:
      - comment
      type: object
    CreateArticleComment_200_response:
      example:
        comment:
          createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            image: image
            following: true
            bio: bio
            username: username
          id: 0
          body: body
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
      required:
      - comment
      type: object
    GetTags_200_response:
      example:
        tags:
        - tags
        - tags
      properties:
        tags:
          items:
            type: string
          type: array
      required:
      - tags
      type: object
    GenericErrorModel_errors:
      properties:
        body:
          items:
            type: string
          type: array
      required:
      - body
      type: object
  securitySchemes:
    Token:
      description: "For accessing the protected API resources, you must have received\
        \ a a valid JWT token after registering or logging in. This JWT token must\
        \ then be used for all protected resources by passing it in via the 'Authorization'\
        \ header.\n\nA JWT token is generated by the API by either registering via\
        \ /users or logging in via /users/login.\n\nThe following format must be in\
        \ the 'Authorization' header :\n\n    Token xxxxxx.yyyyyyy.zzzzzz\n    \n"
      in: header
      name: Authorization
      type: apiKey

