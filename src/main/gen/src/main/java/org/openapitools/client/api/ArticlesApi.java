/*
 * Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateArticle201Response;
import org.openapitools.client.model.CreateArticleRequest;
import org.openapitools.client.model.GenericErrorModel;
import org.openapitools.client.model.GetArticlesFeed200Response;
import org.openapitools.client.model.UpdateArticleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ArticlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArticlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArticlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createArticle
     * @param article Article to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArticleCall(CreateArticleRequest article, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = article;

        // create path and map variables
        String localVarPath = "/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArticleValidateBeforeCall(CreateArticleRequest article, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling createArticle(Async)");
        }
        

        okhttp3.Call localVarCall = createArticleCall(article, _callback);
        return localVarCall;

    }

    /**
     * Create an article
     * Create an article. Auth is required
     * @param article Article to create (required)
     * @return CreateArticle201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CreateArticle201Response createArticle(CreateArticleRequest article) throws ApiException {
        ApiResponse<CreateArticle201Response> localVarResp = createArticleWithHttpInfo(article);
        return localVarResp.getData();
    }

    /**
     * Create an article
     * Create an article. Auth is required
     * @param article Article to create (required)
     * @return ApiResponse&lt;CreateArticle201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateArticle201Response> createArticleWithHttpInfo(CreateArticleRequest article) throws ApiException {
        okhttp3.Call localVarCall = createArticleValidateBeforeCall(article, null);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an article (asynchronously)
     * Create an article. Auth is required
     * @param article Article to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArticleAsync(CreateArticleRequest article, final ApiCallback<CreateArticle201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArticleValidateBeforeCall(article, _callback);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteArticle
     * @param slug Slug of the article to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArticleCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteArticleValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling deleteArticle(Async)");
        }
        

        okhttp3.Call localVarCall = deleteArticleCall(slug, _callback);
        return localVarCall;

    }

    /**
     * Delete an article
     * Delete an article. Auth is required
     * @param slug Slug of the article to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteArticle(String slug) throws ApiException {
        deleteArticleWithHttpInfo(slug);
    }

    /**
     * Delete an article
     * Delete an article. Auth is required
     * @param slug Slug of the article to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteArticleWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = deleteArticleValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an article (asynchronously)
     * Delete an article. Auth is required
     * @param slug Slug of the article to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArticleAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteArticleValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticle
     * @param slug Slug of the article to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getArticle(Async)");
        }
        

        okhttp3.Call localVarCall = getArticleCall(slug, _callback);
        return localVarCall;

    }

    /**
     * Get an article
     * Get an article. Auth not required
     * @param slug Slug of the article to get (required)
     * @return CreateArticle201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CreateArticle201Response getArticle(String slug) throws ApiException {
        ApiResponse<CreateArticle201Response> localVarResp = getArticleWithHttpInfo(slug);
        return localVarResp.getData();
    }

    /**
     * Get an article
     * Get an article. Auth not required
     * @param slug Slug of the article to get (required)
     * @return ApiResponse&lt;CreateArticle201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateArticle201Response> getArticleWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getArticleValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an article (asynchronously)
     * Get an article. Auth not required
     * @param slug Slug of the article to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticleAsync(String slug, final ApiCallback<CreateArticle201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticles
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlesCall(String tag, String author, String favorited, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (favorited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favorited", favorited));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticlesValidateBeforeCall(String tag, String author, String favorited, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getArticlesCall(tag, author, favorited, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Get recent articles globally
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return GetArticlesFeed200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetArticlesFeed200Response getArticles(String tag, String author, String favorited, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetArticlesFeed200Response> localVarResp = getArticlesWithHttpInfo(tag, author, favorited, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get recent articles globally
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return ApiResponse&lt;GetArticlesFeed200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetArticlesFeed200Response> getArticlesWithHttpInfo(String tag, String author, String favorited, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getArticlesValidateBeforeCall(tag, author, favorited, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetArticlesFeed200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent articles globally (asynchronously)
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlesAsync(String tag, String author, String favorited, Integer offset, Integer limit, final ApiCallback<GetArticlesFeed200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticlesValidateBeforeCall(tag, author, favorited, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetArticlesFeed200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArticlesFeed
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlesFeedCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticlesFeedValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getArticlesFeedCall(offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Get recent articles from users you follow
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return GetArticlesFeed200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetArticlesFeed200Response getArticlesFeed(Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetArticlesFeed200Response> localVarResp = getArticlesFeedWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get recent articles from users you follow
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return ApiResponse&lt;GetArticlesFeed200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetArticlesFeed200Response> getArticlesFeedWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getArticlesFeedValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<GetArticlesFeed200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent articles from users you follow (asynchronously)
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Multiple articles </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArticlesFeedAsync(Integer offset, Integer limit, final ApiCallback<GetArticlesFeed200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticlesFeedValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetArticlesFeed200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArticle
     * @param slug Slug of the article to update (required)
     * @param article Article to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArticleCall(String slug, UpdateArticleRequest article, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = article;

        // create path and map variables
        String localVarPath = "/articles/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArticleValidateBeforeCall(String slug, UpdateArticleRequest article, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling updateArticle(Async)");
        }
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling updateArticle(Async)");
        }
        

        okhttp3.Call localVarCall = updateArticleCall(slug, article, _callback);
        return localVarCall;

    }

    /**
     * Update an article
     * Update an article. Auth is required
     * @param slug Slug of the article to update (required)
     * @param article Article to update (required)
     * @return CreateArticle201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CreateArticle201Response updateArticle(String slug, UpdateArticleRequest article) throws ApiException {
        ApiResponse<CreateArticle201Response> localVarResp = updateArticleWithHttpInfo(slug, article);
        return localVarResp.getData();
    }

    /**
     * Update an article
     * Update an article. Auth is required
     * @param slug Slug of the article to update (required)
     * @param article Article to update (required)
     * @return ApiResponse&lt;CreateArticle201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateArticle201Response> updateArticleWithHttpInfo(String slug, UpdateArticleRequest article) throws ApiException {
        okhttp3.Call localVarCall = updateArticleValidateBeforeCall(slug, article, null);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an article (asynchronously)
     * Update an article. Auth is required
     * @param slug Slug of the article to update (required)
     * @param article Article to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single article </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArticleAsync(String slug, UpdateArticleRequest article, final ApiCallback<CreateArticle201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArticleValidateBeforeCall(slug, article, _callback);
        Type localVarReturnType = new TypeToken<CreateArticle201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
